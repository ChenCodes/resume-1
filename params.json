{"name":"Resume","tagline":"This is Jack Huang's CV, Thanks for reading","body":"#### 1. Javascript Closure\r\n\r\nIn general, Javascript Closure is a special context(or scope) for the variables being used by a lower scope in the chain scopes.\r\n\r\n* For example: \r\n\t\r\n````\r\nvar moduelA = (function module(){\r\n\tvar property = 1;\r\n\treturn {\r\n\t\tgetProperty : function () {\r\n\t\t\treturn property;\r\n\t\t}\r\n\t};\r\n})();\r\nmoduelA.getProperty() //equal 1\r\n````\r\nThis is the basic way to achieve the encapsulation in JS Modules, and also a great practical example for Closure. The `property` variable cannot be accessed outside function `module`. But it can be used in the internal function `getPorperty` which is a lower scope, so it will create a Closure scope for \"property\". By running `moduelA.getProperty()`, we can get the property's value.\r\n\r\n* Another example:\r\n\r\n````\r\nfunction ClassA() {\r\n\tvar me = this;\r\n\tsetTimeout(function(){\r\n\t\tme.method();\r\n\t}, 100);\r\n}\r\nClassA.prototype.method = function(){\r\n\talert(5);\r\n};\r\nvar obj = new ClassA() // alert(5) in 100ms later\r\n````\r\nIn this case, we need to execute a prototype method inside a callback which will changed its \"this\" scope, such as \"setTimeout\" and \"Event Listener\". If you don't want to change it via \"bind\" api, A good choice is using Closure, to get the reference of the outside \"this\".\r\n\r\nClosure is not a silver bullet. Be careful about performance if closure is used too much. The variables being used in a Closure, will never be GC. It's better to set a variable to `Null` if there is no reference anymore.\r\n\r\n#### 2. Differences between Get and Post\r\n\r\n* In RESTful, GET method means retrieving data from a resource/server. POST method means submitting data to a resource/server.\r\n\r\n* Query Data : All data in GET is sent in URL, and also have a length restriction. Query string in POST is sent in HTTP message body \r\n\r\n* Data type : Only char type is allowed in GET URL. Any data type is allowed in POST such as Binary Data of files.\r\n\r\n* Security : POST is safer than GET. Do not send any sensitive data like password by GET. Use POST in your AJAX or Form because your data is invisible in the URL, and will never be cached by the browser\r\n\r\n#### 3. DocType\r\n\r\n* DOCTYPE Declaration tells the browser what type of document the page is, and what version of HTML should render, in HTML5 or HTML4.0;\r\n\r\n* In modern web pages, we usually use <!DOCTYPE html> to declare HTML5 as the default version of document, especially on mobile platform;\r\n\r\n#### 4. CommonJS and AMD\r\n\t\r\n* I would use CommonJS when the project:\r\n\t* Many modules with complex dependencies. It is reasonable to load dependencies in synchronous way;\r\n\t* Using Webpack or Browserify to wrap and combine into minimal amount of files to improve network performance;\r\n\t* Manage and install modules by NPM or Bower;\r\n\t* Modules should be reusable in Node.js, rendering React in server as a particular example;\r\n\t* Suitable for SPA wrapped into Cross-Platform by NodeWebkit or PhoneGap, or React-native App.\r\n* I would use AMD when there are cases like:\t\r\n\t* Combining all modules is too much huge. Needs to Parallel load some later;\r\n\t* Need to load styles or others libs asynchronously.\r\n\t* Suitable for the heavy webapp. First loading time of the page is more important.\r\n\r\n* In fact, CommonJS and AMD are both essential. A suitable strategy may be using them together. I'd write codes in CommonJS style, then use Webpack tool setting `libraryTarget:'umd'` in config to wrap modules in 'UMD' style. UMD is Universal Module Definition which is compatible both for CommonJS and AMD. The rest of thing is the matter of the project choice.\r\n\r\n\r\n#### 5. CSS Hack\r\n\r\nCSS Attribute Hacks for IE browsers, using special characters:\r\n\r\n* IE6 : _display: block\r\n* IE7 : *display: block\r\n* IE8 : display: block\\0\r\n\r\n\r\n#### 6. Benefit of JS templating\r\n\r\nSimilar to the server-side templating like JSP and velocity, Javascript template is meaningful for Logic & View Separation in SPA/MVC projects. \r\n\r\nIt provides developers an elegant way to generate dynamic HTML by mixing Data and Template efficiently. It will also enhance the readability and maintainability of the code. Templates may be reusable for other modules and developers.\r\n\r\nOther benefit is the performance optimization. Rendering with templating and innerHTML will truely reduce the DOM manipulations, instead of executing DOM api one by one to update the data.\r\n\r\nAngularJS, React frameworks with advanced templating algorithm are doing better in\r\nrendering optimization, but something are different. In React, avoid re-rendering the whole html once, minimal manipulations is the key theme. It will collect all dom mutations via Virtual DOM Diff, then submit them to the browser using batching in one time.\r\n\r\n\r\n#### 7. Build a Slideshow\r\n\r\nSolutions to build a Slideshow Component:\r\n\r\n* ##### Jssor Slider [www.jssor.com](http://www.jssor.com/) : \r\n\r\n\tThe first solution always comes to jQuery Plugins. This Open-Source libs is functional and can provide multiple effects.\r\n\r\n\t* Pros : \r\n\t\t* Cross-Browser;\r\n\t\t* Easy and efficient for building a simple slider;\r\n\t* Cons : \r\n\t    * Hard to customize your own effects;\r\n\t    * Low animation performance, especially on mobile web;\r\n\r\n* ##### Pure CSS3 Slider [cssslider.com](http://cssslider.com/) : \r\n\r\n\t* Pros : It is an elegant and innovative solution to achieve Slideshow. Using pure CSS3 to achieve high performance transition animation. It's perfect and amazing!\r\n\t\r\n\t* Cons : It is not a framework but a tool for designer, and not free.\r\n\r\n* ##### iScroll [iscrolljs.com](http://iscrolljs.com/#snap): \r\n\tWhen it comes to mobile web, I really recommend using iScroll. Thus iScroll mainly focus on high performance, smooth scroll effect, we can still use [Snap](http://iscrolljs.com/#snap) to achieve simple Slideshow effect;\r\n\t* Pros:\r\n\t\t* Extremely High performance;\r\n\t\t* Cross-Browser, and Mobile first;\r\n\t\t* Dependency free, can be used in anywhere;\r\n\t* Cons:\r\n\t    * Developers need to develop `auto-slide` and `navigator` features by using iScroll internal api.\r\n\t    * High requirement for developers' skills to customize;\r\n\t    \r\n* ##### Build your own Slideshow:\r\n\t\r\n\tIf the open-source frameworks didn't match your requirements, why not develop it by your own? As a front-end engineer, it's amazing to create your own UI component and animation effects;\r\n\t\r\n\tThis is my example of a SliderView developed in React [(SlideView in React)](https://github.com/hlissnake/react-app/blob/master/web/src/common/slideView.js). In my opinion, it is essential to have an elegant basic component system/frameworks, to make creating stable and maintainable component more easier. I am using React here.\r\n\t\r\n\t* My Demo of SlideView in React (mobile first, hardware accelerated CSS3, reusable)\r\n\t![my demo](http://gtms04.alicdn.com/tps/i4/TB12tCgIVXXXXclXXXXZ6GBKFXX-150-150.png)\r\n\t\r\n* ##### Java Backend GWT:\r\n\r\n\tGoogle Web Toolkit is a new generation tool for web development. Despite I am not familiar with GWT, and be concern about if it's able to achieve reliable animation effects, I still believe this could be a good solution for Java developers;\r\n\t* Pros : for java developer there is no need to learn Javascript and HTML DOM;\r\n\t* Cons : high complexity in compiled Javascript. Maybe there're some problems in UI performance. Hard to figure out potential Javascript issues in your App;\r\n\t\r\n* ##### In conclusion\r\n\tIn mobile web, Absolutely I recommend using iScroll as your Slideshow. jQuery plugin is also a good idea in you desktop browser pages. It works well with your other framework like AngularJS.\r\n\t\r\n\tCoding component is not difficult. So if it's under a React project, I recommend developing your own Slideshow. It's possible to transfer those components to React-native apps in the future.\r\n\t\r\n\t","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}